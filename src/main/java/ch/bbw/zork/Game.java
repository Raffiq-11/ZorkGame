package ch.bbw.zork;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.Stack;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	public Room getCurrentRoom() {		return currentRoom;	}	public Room getAttic() {		return attic;	}	private Room currentRoom;	private Room attic, bedroom, dining_room, living_room, bath, cellar;	private Items items;	public Game() {		parser = new Parser(System.in);		//beschreibung ändern		attic = new Room("the attic in the house");		bedroom = new Room("bedroom, the place to sleep in the house");		dining_room = new Room("wonderful place to eat");		living_room = new Room("the living room in the house");		bath = new Room("bath, the place to take a shower");		cellar = new Room("the creepy place in the house... Brrr its cold here.");		attic.setExits(null, null, dining_room, null);		bedroom.setExits(null, dining_room, living_room, null);		dining_room.setExits(attic, null, bath, bedroom);		living_room.setExits(bedroom, bath, cellar, null);		bath.setExits(dining_room, null, null, living_room);		cellar.setExits(living_room, null, null, null);		currentRoom = living_room; // start game out		items = new Items();	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		// main-loop		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);			if (currentRoom == attic) {				System.out.println( items.toString(items.DachbodenItems, items.DachbodenGewicht));			}			else if (currentRoom == bedroom) {				System.out.println( items.toString(items.SchlafzimmerItems, items.SchlafzimmerGewicht));			}			else if (currentRoom == bath) {				System.out.println( items.toString(items.BadItems, items.BadGewicht));			}			else if (currentRoom == dining_room) {				System.out.println( items.toString(items.EsszimmerItems, items.EsszimmerGewicht));			}			else if (currentRoom == living_room) {				System.out.println( items.toString(items.WohnzimmerItems, items.WohnzimmerGewicht));			}			else if (currentRoom == cellar) {				System.out.println( items.toString(items.KellerItems, items.KellerGewicht));			}		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private void printMap() {		System.out.println("|----------------------------------------------------");		System.out.println("| Dachboden || Items: Kiste, alter Fernseher, Filme | |");		System.out.println("|----------------------------------------+--------------------------------------------");		System.out.println("| Schlafzimmer || Items: Pullover, Lampe | Esszimmer || Items: Gabel, Messer, Teller |");		System.out.println("|----------------------------------------+-------------+-----------------------------------------------|");		System.out.println("| Wohnzimmer || Items: Fernbedienung, Kissen, Fernseher| Badezimmer || Items: Papier, Kerze, Feuerzeug |");		System.out.println("| |");		System.out.println("|----------------------------------------------+-------+-----------------------------------------------|");		System.out.println("| Keller || Items: Leiche, Wein, Tennisschläger|");		System.out.println("|----------------------------------------------+");		System.out.println("|----------------------------------------------------");		System.out.println("| Dachboden || Items: Kiste, alter Fernseher, Filme |");		System.out.println("|----------------------------------------+--------------------------------------------");		System.out.println("| Schlafzimmer || Items: Pullover, Lampe | Esszimmer || Items: Gabel, Messer, Teller |");		System.out.println("|----------------------------------------+-------------+-----------------------------------------------|");		System.out.println("| Wohnzimmer || Items: Fernbedienung, Kissen, Fernseher| Badezimmer || Items: Papier, Kerze, Feuerzeug |");		System.out.println("|----------------------------------------------+-------+-----------------------------------------------|");		System.out.println("| Keller || Items: Leiche, Wein, Tennisschläger|");		System.out.println("|----------------------------------------------+");	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("map")) {			printMap();		} else if (commandWord.equals("go")) {			goRoom(command);					} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		return false;	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());			}		}	}}